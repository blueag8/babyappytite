{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"import pymongo\nimport os\n\nfrom bson.objectid import ObjectId\nfrom flask import Flask, render_template, redirect, request, url_for\nfrom flask_pymongo import PyMongo\nfrom werkzeug.utils import secure_filename\n\n\n#connect to database\napp = Flask(__name__)\n\n\n#set app variables\napp.config[\"MONGO_DBNAME\"] = os.environ.get(\"MONGO_DBNAME\")\napp.config[\"MONGO_URI\"] = os.environ.get(\"MONGO_URI\",\"monogodb://localhost\")\n\napp.config[\"SECRET_KEY\"] = 'yum'\n\n\nmongo = PyMongo(app)\n\n\n#home page\n\n\n@app.route('/')\ndef home():\n    return render_template(\"index.html\", categories=mongo.db.categories.find())\n    \n@app.route('/get_recipes/<category_age>', methods=[\"GET\"])\ndef get_recipes(category_age):\n    \n    print(category_age)\n    return render_template(\"recipes.html\",recipes=mongo.db.recipes.find({\"category_age\":category_age})) \n    \n#single recipe\n\n@app.route('/recipe/<recipe_id>')\ndef recipe(recipe_id):\n      return render_template(\"recipe.html\", recipes=mongo.db.recipes.find({\"_id\": ObjectId(recipe_id)}))\n\n#original routes for category specific recipes\n\n#@app.route('/sixmonth_recipes')\n#def sixmonth_recipes():\n   #return render_template(\"recipes.html\", recipes=mongo.db.recipes.find({\"category_age\":\"6 months +\"}))\n\n#@app.route('/sevenmonth_recipes')\n#def sevenmonth_recipes():\n    #return render_template(\"recipes.html\", recipes=mongo.db.recipes.find({\"category_age\":\"7 months +\"}))\n\n#@app.route('/tenmonth_recipes')\n#def tenmonth_recipes():\n    #return render_template(\"recipes.html\", recipes=mongo.db.recipes.find({\"category_age\":\"10 months +\"}))\n    \n#@app.route('/twelvemonth_recipes')\n#def twelvemonth_recipes():\n    #return render_template(\"recipes.html\",recipes=mongo.db.recipes.find({\"category_age\":\"12 months +\"}))\n\n#add recipe \n\n@app.route('/addrecipe')\ndef addrecipe():\n    \n    return render_template(\"addrecipe.html\", categories=mongo.db.categories.find())\n\n@app.route('/insert_recipe', methods=['POST'])\ndef insert_recipe():\n    \n    recipes=mongo.db.recipes\n\n\n    recipe_name=request.form[\"recipe_name\"]\n    category_age=request.form.get(\"category_age\")\n    cooking_time=int(request.form[\"cooking_time\"])\n    portion_size=int(request.form[\"portion_size\"])\n    allergens=request.form.getlist(\"allergen\"),\n    ingredients=request.form.getlist(\"ingredient\")\n    recipe_description=request.form[\"recipe_description\"]\n    steps=request.form.getlist(\"step\")\n           # image = flask.request.files.get[\"image\"]\n    \n    form={\n    \n        \"recipe_name\":recipe_name,\n        \"category_age\":category_age,\n        \"cooking_time\":cooking_time,\n        \"portion_size\":portion_size,\n        \"allergen\": allergens,\n        \"ingredient\": ingredients,\n        \"recipe_description\":recipe_description,\n        \"step\": steps,\n         }\n          \n    #image.save(os.path.join(app.config[\"IMAGE_UPLOADS\"], filename))   \n\n    print(\"allergens\")\n    recipes.insert_one(form)\n    return redirect(url_for('home'))\n    \n#edit recipe/update recipe\n\n@app.route('/editrecipe/<recipe_id>')\ndef editrecipe(recipe_id):\n    recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})\n    categories=mongo.db.categories.find()\n    return render_template('editrecipe.html', recipe=recipe, categories=categories)\n    \n@app.route('/update_recipe/<recipe_id>', methods=['POST'])\ndef update_recipe(recipe_id):\n\n     \n    #if request.method == \"POST\":\n      # if request.files:\n                     \n\n    recipes=mongo.db.recipes\n    recipes.update( {'_id': ObjectId(recipe_id)},\n  \n    {\n            'recipe_name':request.form.get(\"recipe_name\"),\n            'category_age':request.form.get(\"category_age\"),\n            'cooking_time':int(request.form[\"cooking_time\"]),\n            'portion_size':int(request.form[\"portion_size\"]),\n            'allergens':request.form.getlist(\"allergen\"),\n            'ingredients':request.form.getlist(\"ingredient\"),\n            'recipe_description':request.form.get(\"recipe_description\"),\n            'steps':request.form.getlist(\"step\"),\n            #'image':request.files[\"image\"]\n      })\n     \n        \n    mongo.db.recipes.find_one_and_update(\n        {'_id': ObjectId(recipe_id)},\n        { '$inc': { 'stars': 1}}\n    )    \n          \n    \n    return redirect(url_for('home'))\n    \n@app.route('/delete_recipe/<recipe_id>')\ndef delete_recipe(recipe_id):\n    mongo.db.recipes.remove({'_id': ObjectId(recipe_id)})\n    return redirect(url_for('home', recipe_id=recipe_id))\n\n# routing for likes\n#referred to another student's code for likes. https://github.com/Deirdre18/dumpdinners-recipe-app/blob/master/app.py\n\n@app.route('/stars/<recipe_id>', methods=[\"GET\", \"POST\"])\ndef stars(recipe_id):\n    \n    mongo.db.recipes.find_one_and_update(\n        {'_id': ObjectId(recipe_id)},\n        { '$inc': { 'stars': 1}}\n    )\n    \n    return redirect(url_for('recipe', recipe_id=recipe_id))\n \n\n    \nif __name__ == '__main__':\n    app.run(host=os.environ.get('IP'),\n            port=int(os.environ.get('PORT')),\n            debug=False)","undoManager":{"mark":-2,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":229.65625,"scrollleft":0,"selection":{"start":{"row":97,"column":0},"end":{"row":97,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/python"}},"timestamp":1568012609655}